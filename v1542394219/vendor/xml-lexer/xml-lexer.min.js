(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
window["xmlLexer"] = require("xml-lexer");
},{"xml-lexer":3}],2:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @api private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {Mixed} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Boolean} exists Only check if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn The listener function.
 * @param {Mixed} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
  else if (!this._events[evt].fn) this._events[evt].push(listener);
  else this._events[evt] = [this._events[evt], listener];

  return this;
};

/**
 * Remove the listeners of a given event.
 *
 * @param {String|Symbol} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {Mixed} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
         listeners.fn === fn
      && (!once || listeners.once)
      && (!context || listeners.context === context)
    ) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
           listeners[i].fn !== fn
        || (once && !listeners[i].once)
        || (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else if (--this._eventsCount === 0) this._events = new Events();
    else delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {String|Symbol} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) {
      if (--this._eventsCount === 0) this._events = new Events();
      else delete this._events[evt];
    }
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],3:[function(require,module,exports){
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EventEmitter = require('eventemitter3');
var noop = function noop() {};

var State = {
    data: 'state-data',
    cdata: 'state-cdata',
    tagBegin: 'state-tag-begin',
    tagName: 'state-tag-name',
    tagEnd: 'state-tag-end',
    attributeNameStart: 'state-attribute-name-start',
    attributeName: 'state-attribute-name',
    attributeNameEnd: 'state-attribute-name-end',
    attributeValueBegin: 'state-attribute-value-begin',
    attributeValue: 'state-attribute-value'
};

var Action = {
    lt: 'action-lt',
    gt: 'action-gt',
    space: 'action-space',
    equal: 'action-equal',
    quote: 'action-quote',
    slash: 'action-slash',
    char: 'action-char',
    error: 'action-error'
};

var Type = {
    text: 'text',
    openTag: 'open-tag',
    closeTag: 'close-tag',
    attributeName: 'attribute-name',
    attributeValue: 'attribute-value'
};

var charToAction = {
    ' ': Action.space,
    '\t': Action.space,
    '\n': Action.space,
    '\r': Action.space,
    '<': Action.lt,
    '>': Action.gt,
    '"': Action.quote,
    "'": Action.quote,
    '=': Action.equal,
    '/': Action.slash
};

var getAction = function getAction(char) {
    return charToAction[char] || Action.char;
};

/**
 * @param  {Object} options
 * @param  {Boolean} options.debug
 * @return {Object}
 */
var create = function create(options) {
    var _State$data, _State$tagBegin, _State$tagName, _State$tagEnd, _State$attributeNameS, _State$attributeName, _State$attributeNameE, _State$attributeValue, _State$attributeValue2, _lexer$stateMachine;

    options = Object.assign({ debug: false }, options);
    var lexer = new EventEmitter();
    var state = State.data;
    var data = '';
    var tagName = '';
    var attrName = '';
    var attrValue = '';
    var isClosing = '';
    var openingQuote = '';

    var emit = function emit(type, value) {
        // for now, ignore tags like: '?xml', '!DOCTYPE' or comments
        if (tagName[0] === '?' || tagName[0] === '!') {
            return;
        }
        var event = { type: type, value: value };
        if (options.debug) {
            console.log('emit:', event);
        }
        lexer.emit('data', event);
    };

    lexer.stateMachine = (_lexer$stateMachine = {}, _defineProperty(_lexer$stateMachine, State.data, (_State$data = {}, _defineProperty(_State$data, Action.lt, function () {
        if (data.trim()) {
            emit(Type.text, data);
        }
        tagName = '';
        isClosing = false;
        state = State.tagBegin;
    }), _defineProperty(_State$data, Action.char, function (char) {
        data += char;
    }), _State$data)), _defineProperty(_lexer$stateMachine, State.cdata, _defineProperty({}, Action.char, function (char) {
        data += char;
        if (data.substr(-3) === ']]>') {
            emit(Type.text, data.slice(0, -3));
            data = '';
            state = State.data;
        }
    })), _defineProperty(_lexer$stateMachine, State.tagBegin, (_State$tagBegin = {}, _defineProperty(_State$tagBegin, Action.space, noop), _defineProperty(_State$tagBegin, Action.char, function (char) {
        tagName = char;
        state = State.tagName;
    }), _defineProperty(_State$tagBegin, Action.slash, function () {
        tagName = '';
        isClosing = true;
    }), _State$tagBegin)), _defineProperty(_lexer$stateMachine, State.tagName, (_State$tagName = {}, _defineProperty(_State$tagName, Action.space, function () {
        if (isClosing) {
            state = State.tagEnd;
        } else {
            state = State.attributeNameStart;
            emit(Type.openTag, tagName);
        }
    }), _defineProperty(_State$tagName, Action.gt, function () {
        if (isClosing) {
            emit(Type.closeTag, tagName);
        } else {
            emit(Type.openTag, tagName);
        }
        data = '';
        state = State.data;
    }), _defineProperty(_State$tagName, Action.slash, function () {
        state = State.tagEnd;
        emit(Type.openTag, tagName);
    }), _defineProperty(_State$tagName, Action.char, function (char) {
        tagName += char;
        if (tagName === '![CDATA[') {
            state = State.cdata;
            data = '';
            tagName = '';
        }
    }), _State$tagName)), _defineProperty(_lexer$stateMachine, State.tagEnd, (_State$tagEnd = {}, _defineProperty(_State$tagEnd, Action.gt, function () {
        emit(Type.closeTag, tagName);
        data = '';
        state = State.data;
    }), _defineProperty(_State$tagEnd, Action.char, noop), _State$tagEnd)), _defineProperty(_lexer$stateMachine, State.attributeNameStart, (_State$attributeNameS = {}, _defineProperty(_State$attributeNameS, Action.char, function (char) {
        attrName = char;
        state = State.attributeName;
    }), _defineProperty(_State$attributeNameS, Action.gt, function () {
        data = '';
        state = State.data;
    }), _defineProperty(_State$attributeNameS, Action.space, noop), _defineProperty(_State$attributeNameS, Action.slash, function () {
        isClosing = true;
        state = State.tagEnd;
    }), _State$attributeNameS)), _defineProperty(_lexer$stateMachine, State.attributeName, (_State$attributeName = {}, _defineProperty(_State$attributeName, Action.space, function () {
        state = State.attributeNameEnd;
    }), _defineProperty(_State$attributeName, Action.equal, function () {
        emit(Type.attributeName, attrName);
        state = State.attributeValueBegin;
    }), _defineProperty(_State$attributeName, Action.gt, function () {
        attrValue = '';
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        data = '';
        state = State.data;
    }), _defineProperty(_State$attributeName, Action.slash, function () {
        isClosing = true;
        attrValue = '';
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        state = State.tagEnd;
    }), _defineProperty(_State$attributeName, Action.char, function (char) {
        attrName += char;
    }), _State$attributeName)), _defineProperty(_lexer$stateMachine, State.attributeNameEnd, (_State$attributeNameE = {}, _defineProperty(_State$attributeNameE, Action.space, noop), _defineProperty(_State$attributeNameE, Action.equal, function () {
        emit(Type.attributeName, attrName);
        state = State.attributeValueBegin;
    }), _defineProperty(_State$attributeNameE, Action.gt, function () {
        attrValue = '';
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        data = '';
        state = State.data;
    }), _defineProperty(_State$attributeNameE, Action.char, function (char) {
        attrValue = '';
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        attrName = char;
        state = State.attributeName;
    }), _State$attributeNameE)), _defineProperty(_lexer$stateMachine, State.attributeValueBegin, (_State$attributeValue = {}, _defineProperty(_State$attributeValue, Action.space, noop), _defineProperty(_State$attributeValue, Action.quote, function (char) {
        openingQuote = char;
        attrValue = '';
        state = State.attributeValue;
    }), _defineProperty(_State$attributeValue, Action.gt, function () {
        attrValue = '';
        emit(Type.attributeValue, attrValue);
        data = '';
        state = State.data;
    }), _defineProperty(_State$attributeValue, Action.char, function (char) {
        openingQuote = '';
        attrValue = char;
        state = State.attributeValue;
    }), _State$attributeValue)), _defineProperty(_lexer$stateMachine, State.attributeValue, (_State$attributeValue2 = {}, _defineProperty(_State$attributeValue2, Action.space, function (char) {
        if (openingQuote) {
            attrValue += char;
        } else {
            emit(Type.attributeValue, attrValue);
            state = State.attributeNameStart;
        }
    }), _defineProperty(_State$attributeValue2, Action.quote, function (char) {
        if (openingQuote === char) {
            emit(Type.attributeValue, attrValue);
            state = State.attributeNameStart;
        } else {
            attrValue += char;
        }
    }), _defineProperty(_State$attributeValue2, Action.gt, function (char) {
        if (openingQuote) {
            attrValue += char;
        } else {
            emit(Type.attributeValue, attrValue);
            data = '';
            state = State.data;
        }
    }), _defineProperty(_State$attributeValue2, Action.slash, function (char) {
        if (openingQuote) {
            attrValue += char;
        } else {
            emit(Type.attributeValue, attrValue);
            isClosing = true;
            state = State.tagEnd;
        }
    }), _defineProperty(_State$attributeValue2, Action.char, function (char) {
        attrValue += char;
    }), _State$attributeValue2)), _lexer$stateMachine);

    var step = function step(char) {
        if (options.debug) {
            console.log(state, char);
        }
        var actions = lexer.stateMachine[state];
        var action = actions[getAction(char)] || actions[Action.error] || actions[Action.char];
        action(char);
    };

    lexer.write = function (str) {
        var len = str.length;
        for (var i = 0; i < len; i++) {
            step(str[i]);
        }
    };

    return lexer;
};

module.exports = {
    State: State,
    Action: Action,
    Type: Type,
    create: create
};
},{"eventemitter3":2}]},{},[1]);
